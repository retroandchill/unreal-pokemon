<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="Retro::Polymorphic&lt;*&gt;">
        <Expand>
            <Item Name="[value]" Condition="Vtable != nullptr" ExcludeView="simple">Vtable->GetSize() > sizeof(Storage) ? *(($T1*)Storage.LargeStorage) : *(($T1*)Storage.SmallStorage.data())</Item>
            <Item Name="[large]" Condition="Vtable != nullptr" ExcludeView="simple">Vtable->GetSize() > sizeof(Storage)</Item>
        </Expand>
    </Type>

    <Type Name="Retro::Optional&lt;*&gt;">
        <DisplayString Condition="!IsSet">nullopt</DisplayString>
        <DisplayString Condition="IsSet">{Data}</DisplayString>
        <Expand>
            <Item Condition="IsSet" Name="[value]">Data</Item>
        </Expand>
    </Type>

    <Type Name="Retro::Optional&lt;*&gt;" Priority="Low">
        <DisplayString Condition="Data == nullptr">nullopt</DisplayString>
        <DisplayString Condition="Data != nullptr">{*Data}</DisplayString>
        <Expand>
            <Item Condition="Data != nullptr" Name="[value]">*Data</Item>
        </Expand>
    </Type>

    <Type Name="Retro::UniqueAny">
        <Intrinsic Name="HasValue"   Expression="Vtable != 0"/>
        <Intrinsic Name="Rep"        Expression="Storage"/>
        <Intrinsic Name="Type"        Expression="HasValue() &amp;&amp; Vtable->Type"/>
        <Intrinsic Name="IsBig"     Expression="HasValue() &amp;&amp; Vtable->IsLarge"/>
        <Intrinsic Name="IsSmall"   Expression="HasValue() &amp;&amp; !Vtable->IsLarge"/>
        <DisplayString Condition="!HasValue()">[empty]</DisplayString>
        <DisplayString Condition="IsSmall()">[not empty (small)]</DisplayString>
        <DisplayString Condition="IsBig()">[not empty (large)]</DisplayString>
        <Expand>
            <Item Name="[castable_ptr]" Condition="IsSmall()">(void*)(&amp;storage.SmallStorage)</Item>
            <Item Name="[castable_ptr]" Condition="IsBig()">Storage.LargeStorage</Item>
            <Synthetic Name="HasStorage">
                <DisplayString>{HasStorage()}</DisplayString>
            </Synthetic>
            <Synthetic Name="Type" Condition="HasStorage()">
                <DisplayString>{type()}</DisplayString>
            </Synthetic>
            <Synthetic Name="[representation]" Condition="IsSmall()">
                <DisplayString>(Small Object)</DisplayString>
            </Synthetic>
            <Synthetic Name="[representation]" Condition="IsBig()">
                <DisplayString>(Dynamic Allocation)</DisplayString>
            </Synthetic>
        </Expand>
    </Type>
</AutoVisualizer>