<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="retro::Polymorphic&lt;*&gt;">
        <Expand>
            <Item Name="[value]" ExcludeView="simple">vtable->get_size() > sizeof(storage) ? *(($T1*)storage.large_storage) : *(($T1*)storage.small_storage.data())</Item>
            <Item Name="[large]" ExcludeView="simple">vtable->get_size() > sizeof(storage)</Item>
        </Expand>
    </Type>

    <Type Name="retro::Optional&lt;*&gt;">
        <DisplayString Condition="!is_set">nullopt</DisplayString>
        <DisplayString Condition="is_set">{data}</DisplayString>
        <Expand>
            <Item Condition="is_set" Name="[value]">data</Item>
        </Expand>
    </Type>

    <Type Name="retro::Optional&lt;*&gt;" Priority="Low">
        <DisplayString Condition="data == nullptr">nullopt</DisplayString>
        <DisplayString Condition="data != nullptr">{*data}</DisplayString>
        <Expand>
            <Item Condition="data != nullptr" Name="[value]">*data</Item>
        </Expand>
    </Type>

    <Type Name="retro::UniqueAny">
        <Intrinsic Name="has_value"   Expression="vtable != 0"/>
        <Intrinsic Name="rep"        Expression="storage"/>
        <Intrinsic Name="type"        Expression="has_value() &amp;&amp; vtable->type"/>
        <Intrinsic Name="is_big"     Expression="has_value() &amp;&amp; vtable->is_large"/>
        <Intrinsic Name="is_small"   Expression="has_value() &amp;&amp; !vtable->is_large"/>
        <DisplayString Condition="!has_value()">[empty]</DisplayString>
        <DisplayString Condition="is_small()">[not empty (small)]</DisplayString>
        <DisplayString Condition="is_big()">[not empty (large)]</DisplayString>
        <Expand>
            <Item Name="[castable_ptr]" Condition="is_small()">(void*)(&amp;storage.small_storage)</Item>
            <Item Name="[castable_ptr]" Condition="is_big()">storage.large_storage</Item>
            <Synthetic Name="has_value">
                <DisplayString>{has_value()}</DisplayString>
            </Synthetic>
            <Synthetic Name="type" Condition="has_value()">
                <DisplayString>{type()}</DisplayString>
            </Synthetic>
            <Synthetic Name="[representation]" Condition="is_small()">
                <DisplayString>(Small Object)</DisplayString>
            </Synthetic>
            <Synthetic Name="[representation]" Condition="is_big()">
                <DisplayString>(Dynamic Allocation)</DisplayString>
            </Synthetic>
        </Expand>
    </Type>
</AutoVisualizer>