#nullable enable
using static UnrealSharp.Interop.FTypeBuilderExporter;
using static UnrealSharp.Interop.FPropertyExporter;
using static UnrealSharp.Interop.UClassExporter;
using static UnrealSharp.Interop.UFunctionExporter;
using static System.ComponentModel.EditorBrowsableState;

using System.Diagnostics.CodeAnalysis;
using UnrealSharp;
using UnrealSharp.Core;
using UnrealSharp.Interop;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.CoreUObject;
using UnrealSharp.GameDataAccessTools;
using UnrealSharp.UnrealSharpCore;
using GameDataAccessTools.Core;
using GameDataAccessTools.Core.Utilities;
using UnrealSharp.Core.Attributes;
using System.ComponentModel;

namespace {{Namespace}};

[GeneratedType("{{ClassName}}Settings", "{{Namespace}}")]
public partial class U{{ClassName}}Settings : UCSDeveloperSettings 
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    private static IntPtr NativeTypePtr = UCoreUObjectExporter.CallGetType("{{Assembly}}", "{{Namespace}}", "{{ClassName}}Settings");
    {{#Repositories}}
    {{#HasAsset}}
        
    [EditorBrowsable(Never)]
    private static int U{{ClassName}}Settings_{{Name}}_Offset = CallGetPropertyOffsetFromName(NativeTypePtr, "{{Name}}");
    public TSoftObjectPtr<{{RepositoryClassName}}> {{Name}} => SoftObjectMarshaller<{{RepositoryClassName}}>.FromNative(IntPtr.Add(NativeObject, U{{ClassName}}Settings_{{Name}}_Offset), 0);
    {{/HasAsset}}
    {{/Repositories}}

    {{#HasDisplayName}}
    protected override FText GetDisplayName_Implementation()
    {
        return FText.Localized("GameDataAccessTools", "{{Namespace}}.{{ClassName}}_DisplayName", "{{DisplayName}}");
    }
    
    {{/HasDisplayName}}
}

{{SettingsModuleInitializer}}