#nullable enable
using UnrealSharp;
using UnrealSharp.Attributes;
using UnrealSharp.CoreUObject;
using UnrealSharp.GameDataAccessTools;
using GameDataAccessTools.Core;
using GameDataAccessTools.Core.Views;
using GameDataAccessTools.Core.Utilities;
using ZLinq;

namespace {{Namespace}};

readonly partial record struct {{StructName}}([field: UProperty(PropertyFlags.EditAnywhere)] FName ID) : IDataHandle<{{EntryType}}>{{#Convertables}}, IEquatable<{{Type}}>{{/Convertables}}
{
    {{#WithRepository}}
    public static UScriptStruct EntryStruct => {{Provider}}.{{Repository}}.EntryStruct;

    static IEnumerable<FDataHandleEntry> IDataHandle.Entries => Entries.ToArray();

    public static ValueEnumerable<StructArrayValueEnumerator<{{EntryType}}, FDataHandleEntry>, FDataHandleEntry> Entries
    {
        get
        {
            return {{Provider}}.{{Repository}}.Entries
                .AsValueEnumerable(v => new FDataHandleEntry(v.ID{{#HasDisplayName}}, v.{{DisplayNameProperty}}{{/HasDisplayName}}));
        }
    }

    public bool IsValid => {{Provider}}.{{Repository}}.IsValidEntry(ID);

    public StructView<{{EntryType}}> Entry => {{Provider}}.{{Repository}}.GetEntry(ID);
    {{/WithRepository}}
    {{^WithRepository}}
    public static UScriptStruct EntryStruct => {{EntryType}}.StaticStruct;
    {{/WithRepository}}
    
    public static implicit operator {{StructName}}(in {{EntryType}} entry) 
    {
        return new {{StructName}}(entry.ID);
    } 

    public static implicit operator {{StructName}}(StructView<{{EntryType}}> entry)
    {
        return new {{StructName}}(entry.ID);
    }
    
    public static implicit operator {{StructName}}(FName name) 
    {
        return new {{StructName}}(name);
    }

    public static implicit operator {{StructName}}(string name)
    {
        return new {{StructName}}(name);
    }

    public static implicit operator FName({{StructName}} handle) => handle.ID;

    {{#Convertables}}
    public static implicit operator {{../StructName}}({{Type}} other)
    {
        return new {{StructName}}(other.ID);
    }

    {{/Convertables}}
    public bool Equals(FName other)
    {
        return ID.Equals(other);
    }

    {{#Convertables}}
    public bool Equals({{Type}} other)
    {
        return ID.Equals(other.ID);
    }

    {{/Convertables}}
    public static bool operator ==({{StructName}} left, FName right)
    {
        return left.Equals(right);
    }

    public static bool operator !=({{StructName}} left, FName right)
    {
        return !(left == right);
    }

    {{#Convertables}}
    public static bool operator ==({{../StructName}} left, {{Type}} right)
    {
        return left.Equals(right);
    }

    public static bool operator !=({{../StructName}} left, {{Type}} right)
    {
        return !(left == right);
    }

    {{/Convertables}}

    public override string ToString() => ID.ToString();
}
                                                                          