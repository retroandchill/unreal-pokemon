#nullable enable
using static UnrealSharp.Interop.FTypeBuilderExporter;
using static UnrealSharp.Interop.FPropertyExporter;
using static UnrealSharp.Interop.UClassExporter;
using static UnrealSharp.Interop.UFunctionExporter;
using static System.ComponentModel.EditorBrowsableState;


using System.Diagnostics.CodeAnalysis;
using UnrealSharp;
using UnrealSharp.Core;
using UnrealSharp.Core.Attributes;
using UnrealSharp.Core.Marshallers;
using UnrealSharp.Interop;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.CoreUObject;
using UnrealSharp.DeveloperSettings;
using UnrealSharp.GameDataAccessTools;
using GameDataAccessTools.Core;
using System.ComponentModel;

namespace {{Namespace}};

[GeneratedType("{{ClassName}}Manager", "{{Namespace}}")]
public partial class U{{ClassName}}Manager : UGameDataManagerBase 
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    private static IntPtr NativeTypePtr = UCoreUObjectExporter.CallGetType("{{Assembly}}", "{{Namespace}}", "{{ClassName}}Settings");

    private static U{{ClassName}}Manager? _instance = null;
    
    public static U{{ClassName}}Manager Instance => _instance ?? throw new InvalidOperationException("U{{ClassName}}Manager is not active");

    {{#Repositories}}
    {{#HasAsset}}
    [EditorBrowsable(Never)]
    private static int U{{../ClassName}}Manager_{{Name}}Asset_Offset = CallGetPropertyOffsetFromName(NativeTypePtr, "{{Name}}Asset");
    private {{RepositoryClassName}} {{Name}}Asset 
    {
        get => ObjectMarshaller<{{RepositoryClassName}}>.FromNative(IntPtr.Add(NativeObject, U{{../ClassName}}Manager_{{Name}}Asset_Offset), 0);
        set => ObjectMarshaller<{{RepositoryClassName}}>.ToNative(IntPtr.Add(NativeObject, U{{../ClassName}}Manager_{{Name}}Asset_Offset), 0, value);
    }

    public {{RepositoryClassName}} {{Name}}
    {
        get 
        {
            {{Name}}Asset ??= LoadRepository(UObject.GetDefault<U{{../ClassName}}Settings>().{{Name}});
            return {{Name}}Asset;
        }
    }    

    {{/HasAsset}}
    {{^HasAsset}}
    [EditorBrowsable(Never)]
    private static int U{{../ClassName}}Manager_{{Name}}_Offset = CallGetPropertyOffsetFromName(NativeTypePtr, "{{Name}}");
    public {{RepositoryClassName}} {{Name}}
    {
        get => ObjectMarshaller<{{RepositoryClassName}}>.FromNative(IntPtr.Add(NativeObject, U{{../ClassName}}Manager_{{Name}}_Offset), 0);
        private set => ObjectMarshaller<{{RepositoryClassName}}>.ToNative(IntPtr.Add(NativeObject, U{{../ClassName}}Manager_{{Name}}_Offset), 0, value);
    }

    {{/HasAsset}}
    {{/Repositories}}    

    public static void Startup()
    {
        if (_instance is not null)
        {
            throw new InvalidOperationException("U{{ClassName}}Manager has already be initialized");
        }

        _instance = Create<U{{ClassName}}Manager>("{{ClassName}}Manager");
    }

    public static void Shutdown() 
    {
        if (_instance is null)
        {
            throw new InvalidOperationException("U{{ClassName}}Manager is not active initialized");
        }

        _instance.Destroy();
        _instance = null;
    }
    
    protected override void Initialize_Implementation()
    {
        var settings = UObject.GetDefault<U{{ClassName}}Settings>();
        {{#Repositories}}
        {{#HasAsset}}
        {{Name}}Asset = TryLoadRepository(settings.{{Name}});
        {{/HasAsset}}
        {{^HasAsset}}
        {{Name}} = NewObject<{{RepositoryClassName}}>(this);    
        {{/HasAsset}}
        {{/Repositories}}
    }

    private static T? TryLoadRepository<T>(TSoftObjectPtr<T> ptr) where T : UAssetGameDataRepository
    {
        if (ptr.IsNull) return null;
        return ptr.LoadSynchronous();
    }

    private static T LoadRepository<T>(TSoftObjectPtr<T> ptr) where T : UAssetGameDataRepository
    {
        return TryLoadRepository(ptr) ?? throw new InvalidOperationException("Could not load repository");
    }
}

{{ManagerModuleInitializer}}