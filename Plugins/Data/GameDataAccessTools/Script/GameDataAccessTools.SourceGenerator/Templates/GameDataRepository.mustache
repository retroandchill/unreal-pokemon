#nullable enable
using UnrealSharp;
using UnrealSharp.Attributes;
using GameDataAccessTools.Core;
using GameDataAccessTools.Core.Interop;
using GameDataAccessTools.Core.Marshallers;
using GameDataAccessTools.Core.Views;

namespace {{Namespace}};

partial class {{AssetClassName}} : {{#IsStatic}}IStaticGameDataRepository{{/IsStatic}}{{^IsStatic}}IGameDataRepository{{/IsStatic}}<{{EntryName}}> 
{
    [UProperty]
    private TArray<{{EntryName}}> DataEntries { get; }

    private static ArrayViewMarshaller<StructView<{{EntryName}}>>? _entriesMarshaller;
    public ArrayView<StructView<{{EntryName}}>> Entries
    {
        get
        {
            _entriesMarshaller ??= new ArrayViewMarshaller<StructView<{{EntryName}}>>(StructViewMarshaller<{{EntryName}}>.FromNative);
            var nativeArray = GameDataRepositoryExporter.CallGetEntries(NativeObject);
            return _entriesMarshaller.FromNative(nativeArray, 0);
        }
    }

    public bool IsValidEntry(FName id)
    {
        var nativeEntry = GameDataRepositoryExporter.CallGetEntryByID(NativeObject, id);
        return nativeEntry != IntPtr.Zero;
    }

    public StructView<{{EntryName}}> GetEntry(FName id)
    {
        return TryGetEntry(id, out var entry) ? entry : throw new KeyNotFoundException();
    }

    public StructView<{{EntryName}}> GetEntry(int index)
    {
        return TryGetEntry(index, out var entry) ? entry : throw new KeyNotFoundException();
    }

    public bool TryGetEntry(FName id, out StructView<{{EntryName}}> entry)
    {
        var nativeEntry = GameDataRepositoryExporter.CallGetEntryByID(NativeObject, id);
        if (nativeEntry == IntPtr.Zero)
        {
            entry = default;
            return false;
        }
        
        entry = StructViewMarshaller<{{EntryName}}>.FromNative(nativeEntry, 0);
        return true;
    }

    public bool TryGetEntry(int index, out StructView<{{EntryName}}> entry)
    {
        var nativeEntry = GameDataRepositoryExporter.CallGetEntryByIndex(NativeObject, index);
        if (nativeEntry == IntPtr.Zero)
        {
            entry = default;
            return false;
        }
        
        entry = StructViewMarshaller<{{EntryName}}>.FromNative(nativeEntry, 0);
        return true;
    }   

    {{#IsStatic}}
    public void RegisterEntry({{EntryName}} entry)
    {
        RegisterEntryInternal(entry);
    }

    public bool TryRegisterEntry({{EntryName}} entry)
    {
        return TryRegisterEntryInternal(entry);
    }
    {{/IsStatic}} 
}
