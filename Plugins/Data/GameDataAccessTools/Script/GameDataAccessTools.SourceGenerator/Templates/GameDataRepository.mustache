#nullable enable
using static UnrealSharp.Interop.FTypeBuilderExporter;
using static UnrealSharp.Interop.FPropertyExporter;
using static UnrealSharp.Interop.UClassExporter;
using static UnrealSharp.Interop.UFunctionExporter;
using static System.ComponentModel.EditorBrowsableState;

using UnrealSharp;
using UnrealSharp.Attributes;
using UnrealSharp.Core;
using UnrealSharp.Core.Attributes;
using GameDataAccessTools.Core;
using UnrealSharp.Interop;
using GameDataAccessTools.Core.Interop;
using GameDataAccessTools.Core.Marshallers;
using GameDataAccessTools.Core.Views;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace {{Namespace}};

partial class {{AssetClassName}} : {{#IsStatic}}IStaticGameDataRepository{{/IsStatic}}{{^IsStatic}}IGameDataRepository{{/IsStatic}}<{{EntryName}}> 
{
{{DataEntriesProperty}}

    private static ArrayViewMarshaller<StructView<{{EntryName}}>>? _entriesMarshaller;

    /// <inheritdoc/>
    public ArrayView<StructView<{{EntryName}}>> Entries
    {
        get
        {
            _entriesMarshaller ??= new ArrayViewMarshaller<StructView<{{EntryName}}>>(StructViewMarshaller<{{EntryName}}>.FromNative);
            var nativeArray = GameDataRepositoryExporter.CallGetEntries(NativeObject);
            return _entriesMarshaller.FromNative(nativeArray, 0);
        }
    }

    /// <inheritdoc/>
    public bool IsValidEntry(FName id)
    {
        var nativeEntry = GameDataRepositoryExporter.CallGetEntryByID(NativeObject, id);
        return nativeEntry != IntPtr.Zero;
    }

    /// <inheritdoc/>
    public StructView<{{EntryName}}> GetEntry(FName id)
    {
        return TryGetEntry(id, out var entry) ? entry : throw new KeyNotFoundException();
    }

    /// <inheritdoc/>
    public StructView<{{EntryName}}> GetEntry(int index)
    {
        return TryGetEntry(index, out var entry) ? entry : throw new KeyNotFoundException();
    }

    /// <inheritdoc/>
    public bool TryGetEntry(FName id, out StructView<{{EntryName}}> entry)
    {
        var nativeEntry = GameDataRepositoryExporter.CallGetEntryByID(NativeObject, id);
        if (nativeEntry == IntPtr.Zero)
        {
            entry = default;
            return false;
        }
        
        entry = StructViewMarshaller<{{EntryName}}>.FromNative(nativeEntry, 0);
        return true;
    }

    /// <inheritdoc/>
    public bool TryGetEntry(int index, out StructView<{{EntryName}}> entry)
    {
        var nativeEntry = GameDataRepositoryExporter.CallGetEntryByIndex(NativeObject, index);
        if (nativeEntry == IntPtr.Zero)
        {
            entry = default;
            return false;
        }
        
        entry = StructViewMarshaller<{{EntryName}}>.FromNative(nativeEntry, 0);
        return true;
    }   

    {{#IsStatic}}
    /// <inheritdoc/>
    public void RegisterEntry({{EntryName}} entry)
    {
        RegisterEntryInternal(entry);
    }

    /// <inheritdoc/>
    public bool TryRegisterEntry({{EntryName}} entry)
    {
        if (!TryRegisterEntryInternal(out var error, entry))
        {
            LogGameDataAccessToolsCore.LogError(error);
            return false;
        }

        return true;
    }
    {{/IsStatic}} 
}

internal static class {{AssetClassName}}_DataEntries_Initializer 
{
    #pragma warning disable CA2255
    [ModuleInitializer]
    #pragma warning restore CA2255
    public static void Register() => StartUpJobManager.RegisterTypeAdditionalBuildJob("{{EngineName}}", Initialize);

    private static void Initialize(IntPtr nativeType)
    {
        var nativeProperties = InitStructProps(nativeType, {{PropertiesCount}});
{{ModuleInitializer}}
    }
    
}