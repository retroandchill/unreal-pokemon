using static UnrealSharp.Interop.FTypeBuilderExporter;
using static UnrealSharp.Interop.FPropertyExporter;
using static UnrealSharp.Interop.UClassExporter;
using static UnrealSharp.Interop.UFunctionExporter;
using static System.ComponentModel.EditorBrowsableState;

using UnrealSharp;
using UnrealSharp.Core;
using UnrealSharp.Core.Attributes;
using UnrealSharp.Core.Marshallers;
using UnrealSharp.Interop;
using UnrealSharp.Attributes;
using UnrealSharp.Attributes.MetaTags;
using UnrealSharp.Engine;
using UnrealSharp.RPGCore;
using RPG.Core;
using System.ComponentModel;

namespace {{Namespace}};

[GeneratedType("{{EngineName}}BlueprintLibrary", "{{Namespace}}")]
public partial class U{{EngineName}}BlueprintLibrary : UBlueprintFunctionLibrary 
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    private static IntPtr NativeTypePtr = UCoreUObjectExporter.CallGetType("{{Assembly}}", "{{Namespace}}", "{{EngineName}}BlueprintLibrary");

    {{#Components}}
    {{#Properties}}
    {{#IsExposed}}
    {{#HasGetter}}
    {{#GetterIsUFunction}}
    {{#GetterAttributes}}
    [{{Value}}]    
    {{/GetterAttributes}}    
    {{/GetterIsUFunction}}
    {{^GetterIsUFunction}}
    [UFunction(FunctionFlags.Blueprint{{#IsOptionOrNullableType}}Callable{{/IsOptionOrNullableType}}{{^IsOptionOrNullableType}}Pure{{/IsOptionOrNullableType}}{{#HasDisplayName}}, DisplayName = "Get {{DisplayName}}"{{/HasDisplayName}}{{#HasCategory}}, Category = "{{Category}}"{{/HasCategory}})]    
    {{/GetterIsUFunction}}
    [UMetaData("DefaultToSelf", "unit")]
    {{#IsOptionOrNullableType}}
    [ExpandEnumAsExecs("ReturnValue")]
    public static EValueFindResult Get{{Name}}({{../../ClassName}} unit, out {{UnderlyingType}} value)
    {
        var optionValue = unit.{{Name}};
        {{#IsOptionType}}
        if (optionValue.TryGet(out value))
        {
            return EValueFindResult.Found;
        }
        {{/IsOptionType}}
        {{#IsNullableType}}
        if (optionValue.HasValue)
        {
            value = optionValue.Value;
            return EValueFindResult.Found;
        }
        {{/IsNullableType}}
        
        
        value = default;
        return EValueFindResult.NotFound;
    }
    {{/IsOptionOrNullableType}}
    {{^IsOptionOrNullableType}}
    public static {{Type}} Get{{Name}}({{../../ClassName}} unit) => unit.{{Name}};
    {{/IsOptionOrNullableType}}
        
    {{/HasGetter}}
    {{#HasSetter}}
    {{#SetterIsUFunction}}
    {{#SetterAttributes}}
    [{{Value}}]    
    {{/SetterAttributes}}    
    {{/SetterIsUFunction}}
    {{^SetterIsUFunction}}
    [UFunction(FunctionFlags.BlueprintCallable{{#HasDisplayName}}, DisplayName = "Set {{DisplayName}}"{{/HasDisplayName}}{{#HasCategory}}, Category = "{{Category}}"{{/HasCategory}})]
    {{/SetterIsUFunction}}
    [UMetaData("DefaultToSelf", "unit")]
    {{#IsOptionOrNullableType}}
    public static void Set{{Name}}({{../../ClassName}} unit, {{UnderlyingType}} value) => unit.{{Name}} = value;

    {{#SetterIsUFunction}}
    {{#SetterAttributes}}
    [{{Value}}]    
    {{/SetterAttributes}}    
    {{/SetterIsUFunction}}
    {{^SetterIsUFunction}}
    [UFunction(FunctionFlags.BlueprintCallable{{#HasDisplayName}}, DisplayName = "Set {{DisplayName}}"{{/HasDisplayName}}{{#HasCategory}}, Category = "{{Category}}"{{/HasCategory}})]
    {{/SetterIsUFunction}}
    [UMetaData("DefaultToSelf", "unit")]
    public static void Reset{{Name}}({{../../ClassName}} unit) => unit.{{Name}} = {{#IsOptionType}}{{Type}}.None{{/IsOptionType}}{{^IsOptionType}}null{{/IsOptionType}};
    {{/IsOptionOrNullableType}}
    {{^IsOptionOrNullableType}}
    public static void Set{{Name}}({{../../ClassName}} unit, {{Type}} value) => unit.{{Name}} = value;
    {{/IsOptionOrNullableType}}
        
    {{/HasSetter}}
    {{/IsExposed}}    
    {{/Properties}}
    {{#Methods}}
    {{#IsExposed}}    
    {{#ReturnsOptionOrNullable}}
    {{#Attributes}}
    [{{Value}}]    
    {{/Attributes}}
    [UMetaData("DefaultToSelf", "unit")]
    public static EValueFindResult {{Name}}({{../../ClassName}} unit, out {{UnderlyingType}} result{{#HasParameters}}, {{/HasParameters}}{{#Parameters}}{{Type}} {{Name}}{{#HasDefaultValue}} = {{DefaultValue}}{{/HasDefaultValue}}{{^IsLast}}, {{/IsLast}}{{/Parameters}})
    {
        var optionValue = unit.{{../ComponentName}}.{{Name}}({{#Parameters}}{{Name}}{{^IsLast}}, {{/IsLast}}{{/Parameters}});
        {{#ReturnsOptions}}
        if (optionValue.IsSome)
        {
            result = optionValue.ValueUnsafe();
            return EValueFindResult.Found;
        }
        {{/ReturnsOptions}}
        {{#ReturnsNullable}}
        if (optionValue.HasValue)
        {
        result = optionValue.Value;
        return EValueFindResult.Found;
        }
        {{/ReturnsNullable}}

        result = default;
        return EValueFindResult.NotFound;
    }

    {{/ReturnsOptionOrNullable}}    
    {{^ReturnsOptionOrNullable}}
    {{#Attributes}}
    [{{Value}}]    
    {{/Attributes}}
    [UMetaData("DefaultToSelf", "unit")]
    public static {{ReturnType}} {{Name}}({{../../ClassName}} unit{{#HasParameters}}, {{/HasParameters}}{{#Parameters}}{{RefQualifier}}{{Type}} {{Name}}{{#HasDefault}} = {{DefaultValue}}{{/HasDefault}}{{^IsLast}}, {{/IsLast}}{{/Parameters}})
    {
        {{^ReturnsVoid}}return {{/ReturnsVoid}}unit.{{../ComponentName}}.{{Name}}({{#Parameters}}{{RefQualifier}}{{Name}}{{^IsLast}}, {{/IsLast}}{{/Parameters}});
    }

    {{/ReturnsOptionOrNullable}}
    {{/IsExposed}}
    {{/Methods}}
    {{/Components}}

{{FunctionGlue}}
}

{{ModuleInitializer}}