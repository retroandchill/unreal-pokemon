namespace UnrealSharp.Test.Utils;

/// <summary>
/// Provides extension methods for collections to perform common operations or transformations.
/// </summary>
public static class CollectionExtensions
{
    /// <summary>
    /// Converts an <see cref="IEnumerable{TSource}"/> to an <see cref="OrderedDictionary{TKey, TValue}"/>
    /// by applying specified key and value selector functions to each element in the collection.
    /// </summary>
    /// <typeparam name="TSource">The type of elements in the source collection.</typeparam>
    /// <typeparam name="TKey">The type of keys in the resulting ordered dictionary.</typeparam>
    /// <typeparam name="TValue">The type of values in the resulting ordered dictionary.</typeparam>
    /// <param name="source">The source collection to convert.</param>
    /// <param name="keySelector">A function to extract a key from each element.</param>
    /// <param name="valueSelector">A function to extract a value from each element.</param>
    /// <returns>An <see cref="OrderedDictionary{TKey, TValue}"/> containing keys and values
    /// generated by applying the specified selector functions to the elements of the source collection.</returns>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="source"/>, <paramref name="keySelector"/>,
    /// or <paramref name="valueSelector"/> is <c>null</c>.</exception>
    public static OrderedDictionary<TKey, TValue> ToOrderedDictionary<TSource, TKey, TValue>(
        this IEnumerable<TSource> source,
        Func<TSource, TKey> keySelector,
        Func<TSource, TValue> valueSelector
    )
        where TKey : notnull
    {
        ArgumentNullException.ThrowIfNull(source);
        ArgumentNullException.ThrowIfNull(keySelector);
        ArgumentNullException.ThrowIfNull(valueSelector);

        var dictionary = new OrderedDictionary<TKey, TValue>();
        foreach (var item in source)
        {
            dictionary.Add(keySelector(item), valueSelector(item));
        }
        return dictionary;
    }
}
