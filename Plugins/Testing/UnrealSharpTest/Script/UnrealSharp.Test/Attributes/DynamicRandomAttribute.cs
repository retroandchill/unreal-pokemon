using System.Reflection;
using JetBrains.Annotations;
using NUnit.Framework;
using UnrealSharp.Test.Runner;

namespace UnrealSharp.Test.Attributes;

/// <summary>
/// An attribute used for generating random data to be passed into a parameter during test execution.
/// </summary>
/// <remarks>
/// This attribute allows developers to specify a range and number of random values
/// for various data types such as integers, floating-point numbers, and decimals.
/// It supports the generation of distinct or repeated values based on the given parameters.
/// </remarks>
/// <example>
/// Can be used to specify ranges for different numeric datatypes (int, uint, long, float, etc.)
/// and customize the count of random values.
/// </example>
[AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true)]
[PublicAPI]
public class DynamicRandomAttribute : NUnitAttribute
{
    private IRandomDataSource? _dataSource;

    /// <summary>
    /// Gets the number of random values to generate or provide.
    /// </summary>
    /// <remarks>
    /// This property determines the count of values to be generated for testing purposes.
    /// The count can be specified during object initialization and dictates how many
    /// random values will be created and supplied by the data source.
    /// </remarks>
    public int Count { get; }

    /// <summary>
    /// Indicates whether the generated random values must be unique.
    /// </summary>
    /// <remarks>
    /// This property determines if the random values generated by the data source should be distinct.
    /// If set to true, all generated values will be unique; otherwise, duplicates may be included
    /// in the generated collection. This setting is particularly useful when testing scenarios
    /// where unique data points are required.
    /// </remarks>
    public bool Distinct { get; init; }

    /// <summary>
    /// Represents an attribute used to supply random values to a test parameter
    /// when the test is executed with NUnit.
    /// </summary>
    /// <remarks>
    /// This attribute facilitates the generation of random values for various data types,
    /// allowing developers to test methods with varying inputs. The range and count
    /// of random values can be specified for better test coverage.
    /// </remarks>
    /// <param name="count">
    /// the number of random values to generate or provide
    /// </param>
    public DynamicRandomAttribute(int count = 1)
    {
        Count = count;
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(int min, int max, int count = 1)
    {
        Count = count;
        _dataSource = new IntRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(uint min, uint max, int count = 1)
    {
        Count = count;
        _dataSource = new UIntRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(short min, short max, int count = 1)
    {
        Count = count;
        _dataSource = new ShortRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(ushort min, ushort max, int count = 1)
    {
        Count = count;
        _dataSource = new UShortRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(byte min, byte max, int count = 1)
    {
        Count = count;
        _dataSource = new ByteRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(sbyte min, sbyte max, int count = 1)
    {
        Count = count;
        _dataSource = new SByteRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(long min, long max, int count = 1)
    {
        Count = count;
        _dataSource = new LongRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(ulong min, ulong max, int count = 1)
    {
        Count = count;
        _dataSource = new ULongRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(float min, float max, int count = 1)
    {
        Count = count;
        _dataSource = new FloatRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(double min, double max, int count = 1)
    {
        Count = count;
        _dataSource = new DoubleRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Represents an attribute designed to provide random values to test parameters when tests are executed.
    /// </summary>
    /// <remarks>
    /// Enables the generation of randomized data for testing purposes. This attribute supports various data types,
    /// including numeric ranges such as integers, floats, and decimals. It also allows specification of the count of generated values
    /// and whether the generated values should be distinct.
    /// </remarks>
    /// <param name="count">
    /// The total number of random values to be generated.
    /// </param>
    /// <param name="min">
    /// The minimum value in the range of generated random numbers.
    /// </param>
    /// <param name="max">
    /// The maximum value in the range of generated random numbers.
    /// </param>
    public DynamicRandomAttribute(decimal min, decimal max, int count = 1)
    {
        Count = count;
        _dataSource = new DecimalRandomDataSource(min, max, count);
    }

    /// <summary>
    /// Retrieves a random data source appropriate for the specified parameter type.
    /// </summary>
    /// <param name="parameterInfo">
    /// Metadata about the method parameter for which a random data source is required.
    /// Includes information such as the parameter's type, name, and attributes.
    /// </param>
    /// <returns>
    /// An instance of <see cref="IRandomDataSource"/> that provides random values
    /// matching the specified parameter type.
    /// </returns>
    public IRandomDataSource GetDataSource(ParameterInfo parameterInfo)
    {
        if (_dataSource is not null)
        {
            return _dataSource;
        }

        if (parameterInfo.ParameterType == typeof(sbyte))
        {
            _dataSource = new SByteRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(byte))
        {
            _dataSource = new ByteRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(short))
        {
            _dataSource = new ShortRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(ushort))
        {
            _dataSource = new UShortRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(int))
        {
            _dataSource = new IntRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(uint))
        {
            _dataSource = new UIntRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(long))
        {
            _dataSource = new LongRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(ulong))
        {
            _dataSource = new ULongRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(float))
        {
            _dataSource = new FloatRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(double))
        {
            _dataSource = new DoubleRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType == typeof(decimal))
        {
            _dataSource = new DecimalRandomDataSource(Count);
        }
        else if (parameterInfo.ParameterType.IsEnum)
        {
            _dataSource = new EnumRandomDataSource(Count, parameterInfo.ParameterType);
        }
        else if (parameterInfo.ParameterType == typeof(Guid))
        {
            _dataSource = new GuidRandomDataSource(Count);
        }
        else
        {
            throw new InvalidOperationException($"Unsupported type {parameterInfo.ParameterType}");
        }

        return _dataSource!;
    }
}
