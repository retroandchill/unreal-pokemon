using System.Numerics;
using NUnit.Framework.Internal;

namespace UnrealSharp.Test.Runner;

/// <summary>
/// Defines a contract for generating randomized data for testing purposes.
/// </summary>
public interface IRandomDataSource
{
    /// <summary>
    /// Gets the count of values to be generated by the random data source.
    /// </summary>
    /// <remarks>
    /// This property specifies the total number of randomized data elements
    /// that the data source will provide. The value is typically defined during
    /// the initialization of the data source.
    /// </remarks>
    int Count { get; }

    /// <summary>
    /// Gets the type of the data generated by the random data source.
    /// </summary>
    /// <remarks>
    /// This property specifies the Type of the values that the data source will produce.
    /// It helps identify the category or structure of the random data elements being generated.
    /// </remarks>
    Type Type { get; }

    /// <summary>
    /// Collects an array of values generated using the provided random generator, with an option for unique values.
    /// </summary>
    /// <param name="random">The random number generator used to create values.</param>
    /// <param name="distinct">Indicates whether the generated values should be unique. Defaults to false.</param>
    /// <returns>An array of objects representing the generated values.</returns>
    object?[] CollectValues(Randomizer random, bool distinct = false);
}

/// <summary>
/// Represents an abstract base class for generating randomized data of a specific type.
/// Provides functionality to generate a defined number of random values,
/// with an optional requirement for distinct data.
/// </summary>
/// <param name="count">The total number of random values to be generated.</param>
/// <param name="type">The type of the random values to be generated.</param>
public abstract class RandomDataSourceBase(int count, Type type) : IRandomDataSource
{
    /// <inheritdoc />
    public int Count { get; } = count;

    /// <inheritdoc />
    public Type Type { get; } = type;

    /// <inheritdoc />
    public object?[] CollectValues(Randomizer random, bool distinct = false)
    {
        var values = new object?[Count];
        for (var i = 0; i < Count; i++)
        {
            var nextValue = GetNextValue(random);
            var iterationCount = 0;
            while (distinct && values.Take(i).Any(x => Equals(x, nextValue)))
            {
                nextValue = GetNextValue(random);
                iterationCount++;
                if (iterationCount > 1000)
                    throw new InvalidOperationException("Too many iterations");
            }

            values[i] = Convert.ChangeType(nextValue, Type);
        }

        return values;
    }

    /// <summary>
    /// Generates the next randomized value based on the provided randomizer.
    /// </summary>
    /// <param name="random">The random number generator used to create the value.</param>
    /// <returns>An object representing the next generated value.</returns>
    protected abstract object? GetNextValue(Randomizer random);
}

/// <summary>
/// Serves as a generic abstract base class for generating randomized data of a specific numeric type.
/// Enables the generation of random numeric values, optionally restricted to a specified range.
/// </summary>
/// <typeparam name="T">The numeric type for which random values will be generated. Must implement INumber and struct.</typeparam>
public abstract class RandomDataSourceBase<T> : RandomDataSourceBase
    where T : struct, INumber<T>
{
    /// <summary>
    /// Gets the minimum value in the range of random values to be generated.
    /// </summary>
    /// <remarks>
    /// This property determines the lower boundary for the random values that will be generated within a specified range.
    /// It is used when generating random numbers with defined minimum and maximum bounds.
    /// If no range is specified, this property defaults to the default value of the numeric type.
    /// </remarks>
    protected T Min { get; }

    /// <summary>
    /// Gets the upper bound for the range of random values to be generated.
    /// </summary>
    /// <remarks>
    /// This property defines the maximum value that can be produced by the random data source
    /// when generating values within a specified range. If a range is not specified, this value
    /// defaults to the type's default value.
    /// </remarks>
    protected T Max { get; }

    /// <summary>
    /// Indicates whether the generated random values are restricted to a specific range defined by minimum and maximum bounds.
    /// </summary>
    /// <remarks>
    /// This property determines if the random number generation will be constrained within a predefined range.
    /// When true, random values are generated between the specified minimum and maximum bounds.
    /// If false, the random values are generated without any range restrictions.
    /// </remarks>
    protected bool InRange { get; }

    /// <summary>
    /// Represents an abstract base class for implementing randomized data generation.
    /// Provides functionality to define parameters for random value creation, including type and quantity.
    /// </summary>
    /// <param name="count">The total number of random values to be generated.</param>
    protected RandomDataSourceBase(int count)
        : base(count, typeof(T))
    {
        Min = default;
        Max = default;
        InRange = false;
    }

    /// <summary>
    /// Represents an abstract base class for generating randomized data of a specific type.
    /// Provides functionality to generate a specified number of random values, optionally requiring distinct data.
    /// </summary>
    /// <param name="min">The minimum value in the range of random values to be generated.</param>
    /// <param name="max">The maximum value in the range of random values to be generated.</param>
    /// <param name="count">The total number of random values to be generated.</param>
    protected RandomDataSourceBase(T min, T max, int count)
        : base(count, typeof(T))
    {
        Min = min;
        Max = max;
        InRange = true;
    }
}

/// <summary>
/// Provides a data source for generating random integer values within a specified range or across the full range of integers.
/// </summary>
/// <remarks>
/// This class is designed to create randomized integer values for testing purposes.
/// Users can specify the minimum and maximum range and the count of integers to generate.
/// If no range is specified, it defaults to generating values across the full integer range.
/// </remarks>
public sealed class IntRandomDataSource : RandomDataSourceBase<int>
{
    /// <inheritdoc />
    public IntRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public IntRandomDataSource(int min, int max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.Next(Min, Max) : random.Next();
    }
}

/// <summary>
/// Represents a data source for generating randomized unsigned integer values for testing purposes.
/// </summary>
/// <remarks>
/// Provides functionality to generate random values of type <see cref="uint"/> within a specified range
/// or without any constraints, depending on the parameters provided during initialization.
/// </remarks>
public sealed class UIntRandomDataSource : RandomDataSourceBase<uint>
{
    /// <inheritdoc />
    public UIntRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public UIntRandomDataSource(uint min, uint max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextUInt(Min, Max) : random.NextUInt();
    }
}

/// <summary>
/// Provides a data source for generating randomized <see cref="short"/> values for testing purposes.
/// </summary>
/// <remarks>
/// This class allows generation of random <see cref="short"/> values, either bounded by a specified range
/// or unbounded. It is designed to be used with test frameworks for parameterized testing.
/// </remarks>
public sealed class ShortRandomDataSource : RandomDataSourceBase<short>
{
    /// <inheritdoc />
    public ShortRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public ShortRandomDataSource(short min, short max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextShort(Min, Max) : random.NextShort();
    }
}

/// <summary>
/// Represents a sealed data source for generating randomized unsigned short (ushort) values for testing purposes.
/// </summary>
/// <remarks>
/// This class provides functionality to create random ushort numbers using a specified count or within a given range.
/// </remarks>
public sealed class UShortRandomDataSource : RandomDataSourceBase<ushort>
{
    /// <inheritdoc />
    public UShortRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public UShortRandomDataSource(ushort min, ushort max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextUShort(Min, Max) : random.NextUShort();
    }
}

/// <summary>
/// Represents a data source for generating randomized byte values for testing.
/// </summary>
/// <remarks>
/// This class generates random byte values within the specified range or across the full byte range,
/// using a specified count of values. It is a sealed implementation of <see cref="RandomDataSourceBase{T}"/> where T is of type byte.
/// </remarks>
public sealed class ByteRandomDataSource : RandomDataSourceBase<byte>
{
    /// <inheritdoc />
    public ByteRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public ByteRandomDataSource(byte min, byte max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextByte(Min, Max) : random.NextByte();
    }
}

/// <summary>
/// Represents a random data source that generates random values of type <see cref="sbyte"/>.
/// </summary>
/// <remarks>
/// This class provides mechanisms to generate random <see cref="sbyte"/> values within a specified range
/// or without bounds, for use in testing and data generation scenarios.
/// </remarks>
public sealed class SByteRandomDataSource : RandomDataSourceBase<sbyte>
{
    /// <inheritdoc />
    public SByteRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public SByteRandomDataSource(sbyte min, sbyte max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextSByte(Min, Max) : random.NextSByte();
    }
}

/// <summary>
/// Represents a data source for generating randomized long integer values according to specified constraints.
/// </summary>
public sealed class LongRandomDataSource : RandomDataSourceBase<long>
{
    /// <inheritdoc />
    public LongRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public LongRandomDataSource(long min, long max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextLong(Min, Max) : random.NextLong();
    }
}

/// <summary>
/// Provides a source of random unsigned long values for testing purposes.
/// </summary>
/// <remarks>
/// This class is a specific implementation of a random data source targeting the <c>ulong</c> data type.
/// It can generate random values within a given range or without any range constraints, depending on how it is initialized.
/// </remarks>
/// <seealso cref="RandomDataSourceBase{T}" />
public sealed class ULongRandomDataSource : RandomDataSourceBase<ulong>
{
    /// <inheritdoc />
    public ULongRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public ULongRandomDataSource(ulong min, ulong max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextULong(Min, Max) : random.NextULong();
    }
}

/// <summary>
/// Provides a random data source for floating-point numbers, supporting generation of float values within specified ranges.
/// </summary>
/// <remarks>
/// This class extends the RandomDataSourceBase for type <see cref="float"/> and enables the creation of randomized float values,
/// either constrained within a defined range or unconstrained across all valid float values.
/// </remarks>
public sealed class FloatRandomDataSource : RandomDataSourceBase<float>
{
    /// <inheritdoc />
    public FloatRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public FloatRandomDataSource(float min, float max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextFloat(Min, Max) : random.NextFloat();
    }
}

/// <summary>
/// Provides a data source for generating random double values within a specified range or without restrictions.
/// </summary>
/// <remarks>
/// This class is a specialized implementation of <see cref="RandomDataSourceBase{T}"/> for double-precision floating-point numeric types.
/// It supports generating a specified number of randomized double values, either within a defined range
/// or distributed across the full range of possible double values.
/// </remarks>
public sealed class DoubleRandomDataSource : RandomDataSourceBase<double>
{
    /// <inheritdoc />
    public DoubleRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public DoubleRandomDataSource(double min, double max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextDouble(Min, Max) : random.NextDouble();
    }
}

/// <summary>
/// Provides functionality to generate a sequence of randomized decimal values.
/// </summary>
/// <remarks>
/// This class offers methods to generate decimal values which can be constrained
/// within a specified range. It is designed to be used in scenarios where randomized
/// decimal data is required, such as testing or data simulation.
/// </remarks>
public sealed class DecimalRandomDataSource : RandomDataSourceBase<decimal>
{
    /// <inheritdoc />
    public DecimalRandomDataSource(int count)
        : base(count) { }

    /// <inheritdoc />
    public DecimalRandomDataSource(decimal min, decimal max, int count)
        : base(min, max, count) { }

    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return InRange ? random.NextDecimal(Min, Max) : random.NextDecimal();
    }
}

/// <summary>
/// Represents a data source for generating random enumeration values.
/// </summary>
/// <remarks>
/// This class is designed to provide randomized values from a specified enumeration type
/// and can be used in scenarios requiring diverse test data generation.
/// </remarks>
/// <param name="count">The total number of random values to be generated.</param>
/// <param name="type">The enumeration type for which random values will be generated.</param>
public sealed class EnumRandomDataSource(int count, Type type) : RandomDataSourceBase(count, type)
{
    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return random.NextEnum(Type);
    }
}

/// <summary>
/// Provides a data source for generating random GUID values.
/// </summary>
/// <param name="count">The total number of random values to be generated.</param>
public sealed class GuidRandomDataSource(int count) : RandomDataSourceBase(count, typeof(Guid))
{
    /// <inheritdoc />
    protected override object GetNextValue(Randomizer random)
    {
        return Guid.NewGuid();
    }
}
