// Copyright 2017 ~ 2022 Critical Failure Studio Ltd. All rights reserved.

#include "Graphs/Nodes/PaperZDTransitionGraphNode_Result.h"
#include "Graphs/PaperZDAnimTransitionGraph.h"
#include "GraphEditorSettings.h"
#include "EdGraphSchema_K2.h"
#include "Kismet2/BlueprintEditorUtils.h"

#if ZD_VERSION_INLINED_CPP_SUPPORT
#include UE_INLINE_GENERATED_CPP_BY_NAME(PaperZDTransitionGraphNode_Result)
#endif

//////////////////////////////////////////////////////////////////////////
//// PaperZD Anim Graph Node
//////////////////////////////////////////////////////////////////////////
#define LOCTEXT_NAMESPACE "PaperZDTransitionGraphNode_Result"
UPaperZDTransitionGraphNode_Result::UPaperZDTransitionGraphNode_Result(const FObjectInitializer& ObjectInitializer)
	: Super()
{
}

void UPaperZDTransitionGraphNode_Result::AllocateDefaultPins()
{
	UPaperZDAnimTransitionGraph* Graph = CastChecked<UPaperZDAnimTransitionGraph>(GetGraph());	

	//We use the FProperty to build the node, as its easier this way
	FProperty* Property = FindFProperty<FProperty>(GetClass(), GET_MEMBER_NAME_CHECKED(UPaperZDTransitionGraphNode_Result, bCanEnterTransition));
	if (Property)
	{
		FEdGraphPinType Type;
		const UEdGraphSchema_K2* K2Schema = Cast<const UEdGraphSchema_K2>(GetGraph()->GetSchema());
		K2Schema->ConvertPropertyToPinType(Property, Type);
		UEdGraphPin* Pin = CreatePin(EGPD_Input, Type, Property->GetFName());

		//Fill the default value, so the linear expression widget can read it if no pins are connected
		FString LiteralValue;
		FBlueprintEditorUtils::PropertyValueToString_Direct(Property, Property->ContainerPtrToValuePtr<uint8>(this), LiteralValue);
		K2Schema->SetPinAutogeneratedDefaultValue(Pin, LiteralValue);
	}
}

FLinearColor UPaperZDTransitionGraphNode_Result::GetNodeTitleColor() const
{
	return GetDefault<UGraphEditorSettings>()->ResultNodeTitleColor;
}

FText UPaperZDTransitionGraphNode_Result::GetTooltipText() const
{
	return LOCTEXT("TransitionResultTooltip", "This expression is evaluated to determine if the state transition can be taken");
}

FText UPaperZDTransitionGraphNode_Result::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	return LOCTEXT("Result", "Result");
}

#undef LOCTEXT_NAMESPACE
